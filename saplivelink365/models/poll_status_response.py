# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from saplivelink365.configuration import Configuration


class PollStatusResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'page_count': 'int',
        'page_index': 'int',
        'sap_notification': 'list[PollStatus]'
    }

    attribute_map = {
        'client_id': 'clientId',
        'page_count': 'pageCount',
        'page_index': 'pageIndex',
        'sap_notification': 'SAPNotification'
    }

    def __init__(self, client_id=None, page_count=None, page_index=None, sap_notification=None, local_vars_configuration=None):  # noqa: E501
        """PollStatusResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._page_count = None
        self._page_index = None
        self._sap_notification = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if page_count is not None:
            self.page_count = page_count
        if page_index is not None:
            self.page_index = page_index
        if sap_notification is not None:
            self.sap_notification = sap_notification

    @property
    def client_id(self):
        """Gets the client_id of this PollStatusResponse.  # noqa: E501

        Represents the Client Account.  # noqa: E501

        :return: The client_id of this PollStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PollStatusResponse.

        Represents the Client Account.  # noqa: E501

        :param client_id: The client_id of this PollStatusResponse.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def page_count(self):
        """Gets the page_count of this PollStatusResponse.  # noqa: E501

        Total number of available pages.  # noqa: E501

        :return: The page_count of this PollStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this PollStatusResponse.

        Total number of available pages.  # noqa: E501

        :param page_count: The page_count of this PollStatusResponse.  # noqa: E501
        :type: int
        """

        self._page_count = page_count

    @property
    def page_index(self):
        """Gets the page_index of this PollStatusResponse.  # noqa: E501

        Page number from which the ACKs are fetched.  # noqa: E501

        :return: The page_index of this PollStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_index

    @page_index.setter
    def page_index(self, page_index):
        """Sets the page_index of this PollStatusResponse.

        Page number from which the ACKs are fetched.  # noqa: E501

        :param page_index: The page_index of this PollStatusResponse.  # noqa: E501
        :type: int
        """

        self._page_index = page_index

    @property
    def sap_notification(self):
        """Gets the sap_notification of this PollStatusResponse.  # noqa: E501

        Array of objects describing the statuses the sent messages went through.  # noqa: E501

        :return: The sap_notification of this PollStatusResponse.  # noqa: E501
        :rtype: list[PollStatus]
        """
        return self._sap_notification

    @sap_notification.setter
    def sap_notification(self, sap_notification):
        """Sets the sap_notification of this PollStatusResponse.

        Array of objects describing the statuses the sent messages went through.  # noqa: E501

        :param sap_notification: The sap_notification of this PollStatusResponse.  # noqa: E501
        :type: list[PollStatus]
        """

        self._sap_notification = sap_notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollStatusResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PollStatusResponse):
            return True

        return self.to_dict() != other.to_dict()
